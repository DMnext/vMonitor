def error(errormessage: str | None = None,
          createerror: Exception | None = None,
          errorbreak: bool = True,
          printerror: bool = True,
          errorcolor: tuple[int, int, int] = (255, 0, 0),
          output: str = "list",
          message: bool = True) -> list | str | bool:
    """
    :param errormessage: Message that will be printed at the end of the error. Default is None (no errormessage).
    :param createerror: Which error to create. Default is None (no error to create, only find and handle).
    :param errorbreak: Stop the progress when error handling ends. Default is True (stops progress).
    :param printerror: Print the error in the terminal. Default is True (prints the error).
    :param errorcolor: The color in which the error is printed. Default is 255, 0, 0 (red).
    :param output: Error output ('str' or 'list'). Default is 'list'.
    :return: Error str, bool or list (see output)(False is when no error detected).
    """

    formatted_lines = traceback.format_exc().splitlines()

    def check_for_err():
        for i in formatted_lines:
            if i == "NoneType: None":
                return False
            else:
                return True

    def printerr():
        click.secho(f"  {i}", fg=errorcolor, bold=True)

    def strerr(errorlines1: list):
        # index = 0
        return "/n".join(errorlines1)
        # return}"""
    if message:
        mess = "error says : '"
        mess_end = "'"
    else:
        mess = ""
        mess_end = ""

    if check_for_err():
        if createerror is None:
            errorlines = []
            if printerror:
                print("")
                click.secho("Error ", nl=False)
                click.secho("{", fg=(255, 255, 255), bold=True)
            for i in formatted_lines:
                errorlines.append(i)
                if printerror:
                    printerr()
            if printerror:
                click.secho("}:", fg=(255, 255, 255), bold=True)
                #click.secho("Error occurred in '", nl=False)
                #click.secho(f"{formatted_lines[-1]}", fg=(255, 0, 0), bold=True, nl=False)
                #click.secho("'")
                if errormessage is None:
                    click.secho(errormessage)
            if errorbreak:
                exit(1)
            if output == "list":
                return errorlines
            if output == "str":
                return strerr(errorlines1=errorlines)
        else:
            try:
                raise createerror
            except createerror:
                error(errormessage=errormessage)
    else:
        if printerror:
            click.secho(f"{mess}No error detected?!{mess_end}")
            return False
        return False
